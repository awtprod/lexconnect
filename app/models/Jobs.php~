<?php

use Illuminate\Auth\UserTrait;
use Illuminate\Auth\UserInterface;
use Illuminate\Auth\Reminders\RemindableTrait;
use Illuminate\Auth\Reminders\RemindableInterface;
use Carbon\Carbon;

class Jobs extends Eloquent implements UserInterface, RemindableInterface {

	use UserTrait, RemindableTrait;
	public $timestamps = true;
	protected $fillable = ['defendant','street','street2','city','state','zipcode','order_id'];
	
	public static $rules = [
		'defendant' => 'required',
		'street' => 'required',
		'city' => 'required',
		'zipcode' => 'required|min:5|max:5',
	];
	public static $file_rules = [
		'proof' => 'mimes:pdf|max:10000',
		];

	public $errors;

	
	/**
	 * The database table used by the model.
	 *
	 * @var string
	 */
	protected $table = 'jobs';

	/**
	 * The attributes excluded from the model's JSON form.
	 *
	 * @var array
	 */
	protected $hidden = array('password', 'remember_token');

	public function isValid()
	{
		
		$validation = Validator::make($this->attributes, static::$rules);
		
		if ($validation->passes()) return true;
		
		$this->errors = $validation->messages();
		
		return false;
	}
	public function ValidFile()
	{
		
		$validation = Validator::make($this->attributes, static::$file_rules);
		
		if ($validation->passes()) return true;
		
		$this->errors = $validation->messages();
		
		return false;
	}
	public function SelectServer($zipcode)
	{
	if(!empty($zipcode)){
		$input1 = urlencode($zipcode);
	}
	else{
	$input1 = urlencode($this->attributes["zipcode"]);
	}
	$req = "http://api.geosvc.com/rest/usa/{$input1}/nearby?pt=vendor&d=20&apikey=60e6b26c492541e0946cc43f57f33489&format=json";
	$result = (array) json_decode(file_get_contents($req), true);
	if(empty($result)){
		return 1;
	}
	$distance = array();
	foreach($result as $select){
	
		$score = DB::table('company')->where('id', $select["UserData"])->pluck('score');
		$distance[$select["UserData"]] = (1-($score))*($select["Distance"]["Value"]);
		
	}
	$server = array_keys($distance, min($distance));
	foreach($server as $servers){
		return $servers;
	}

	}
	
	public function HoldJob($id){
	
	$job = Jobs::whereId($id)->first();
	$job->status = 1;
	$job->save();
	
	return true;
	
	}
	
	public function RemoveHold($id){
	
	$job = Jobs::whereId($id)->first();
	$job->status = 0;
	$job->save();
	
	return true;
		
	}
	
	public function CancelJob($id){
		
	//Find what step the job is on
	$task = DB::table('tasks')->where('job_id', $id)->whereNULL('completion')->first();
	
	//If filing task, complete all tasks
	if($task->process <= 5){
	
	//Save completion date for task
	$task->completion = Carbon::now();
	$task->save();	
	
	//Save process to cache to complete upcoming tasks
	Cache::put('process', $task->process, 5);
	Cache::increment('process');
	
	//Determine if this was the last task for the job
	$tasks_final = Tasks::OrderBy('id', 'desc')
						->whereJobId($task->job_id)
						->whereProcess(Cache::get('process'))->first();
			
	//If it is not the last task, complete remaining tasks
	if(!empty($tasks_final)){
		
			$first = true;
			
			for($process = Cache::get('process'); $process<=10; $process++){
			$tasks_next = Tasks::OrderBy('id', 'desc')
						->whereJobId($tasks_first->job_id)
						->whereProcess($process)->first();
			if(!empty($tasks_next)){
			
			//Update status of next task
			if($first){
			$tasks_next->completion = Carbon::now();
			$tasks_next->save();	
			$first = false;
			}
			//Update remaining tasks
			else{
			$tasks_next->completion = Carbon::now();
			$tasks_next->save();	
			}
			}
			}
			Cache::forget('process');
			}
	//Complete Job
	$job = Jobs::whereId($id)->first();
	$job->status = 2;
	$job->completed = Carbon::now();
	$job->save();
	
	return true;
	}
	
	//If service task, complete all but proof task
	elseif($task->process == 6){
		
	//Save completion date for task
	$task->completion = Carbon::now();
	$task->save();
	
	return true;
	
	}
	
	}

}
