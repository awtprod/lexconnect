<?php

use Illuminate\Auth\UserTrait;
use Illuminate\Auth\UserInterface;
use Illuminate\Auth\Reminders\RemindableTrait;
use Illuminate\Auth\Reminders\RemindableInterface;
use Carbon\Carbon;

class Tasks extends Eloquent implements UserInterface, RemindableInterface {

	use UserTrait, RemindableTrait;
	public $timestamps = true;
	protected $fillable = ['defendant','street','street2','city','state','zipcode','name','company', 'date', 'recording', 'case', 'documents'];
	
	public static $rules = [
		'defendant' => 'required',
		'street' => 'required',
		'city' => 'required',
		'state' => 'required',
		'zipcode' => 'required|min:5|max:5'
	];
	
	public static $file_rules = [
		'date' => 'required',
		'case' => 'required',
		'documents' => 'required|mimes:pdf|max:10000'
		];
	public static $rec_rules = [
		'date' => 'required',
		'recording' => 'required',
		'documents' => 'required|mimes:pdf|max:10000'
		];		
	public $errors;

	
	/**
	 * The database table used by the model.
	 *
	 * @var string
	 */
	protected $table = 'tasks';

	/**
	 * The attributes excluded from the model's JSON form.
	 *
	 * @var array
	 */
	protected $hidden = array('password', 'remember_token');

	public function isValid()
	{
		
		$validation = Validator::make($this->attributes, static::$rules);
		
		if ($validation->passes()) return true;
		
		$this->errors = $validation->messages();
		
		return false;
	}
	public function ValidFile()
	{
		$validation = Validator::make($this->attributes, static::$file_rules);
		
		if ($validation->passes()) return true;
		
		$this->errors = $validation->messages();
		
		return false;	
	}
	public function ValidRec()
	{
		$validation = Validator::make($this->attributes, static::$rec_rules);
		
		if ($validation->passes()) return true;
		
		$this->errors = $validation->messages();
		
		return false;	
	}
	
	public function ServerScore($id){
			$tasks = Tasks::whereId($id)->first();
			$y = date("Y", strtotime($tasks->deadline));
			$m = date("m", strtotime($tasks->deadline));
			$d = date("d", strtotime($tasks->deadline));
			$difference = Carbon::now()->diffInDays(Carbon::createFromDate($y, $m, $d),false);
			if($difference < 0){
			$abs_difference = abs($difference);
			DB::table('company')->where('id', $tasks->vendor)->increment('total_points', $abs_difference);
			}
			else{
			DB::table('company')->where('id', $tasks->vendor)->increment('points', $difference);
			DB::table('company')->where('id', $tasks->vendor)->increment('total_points', $difference);		
			}	
	}
	public function TaskForecast($id){
			$tasks_first = Tasks::whereId($id)->first();
			Cache::put('days', Carbon::now()->addDays($tasks_first->days), 5);
			$tasks_first->deadline = Cache::get('days');
			$tasks_first->save();
			
			Cache::put('process', $tasks_first->process, 5);
			Cache::increment('process');

			
			for($process = Cache::get('process'); $process<=10; $process++){
			$tasks_next = Tasks::OrderBy('id', 'desc')
						->whereJobId($tasks_first->job_id)
						->whereProcess($process)->first();
			if(!empty($tasks_next)){
			$days = Cache::get('days')->addDays($tasks_next->days);
			$tasks_next->deadline = $days;
			$tasks_next->save();	
			Cache::put('days', $days, 5);
			}
			}
			Cache::forget('days', 'process');	
	}
	
	public function TaskReproject($id){
			$tasks_first = Tasks::whereId($id)->first();
			
			//Save process and date to cache to update the deadlines of upcoming tasks
			Cache::put('process', $tasks_first->process, 5);
			Cache::put('days', Carbon::now(), 5);
			Cache::increment('process');
			
			//Determine if this was the last task for the job
			$tasks_final = Tasks::OrderBy('id', 'desc')
						->whereJobId($tasks_first->job_id)
						->whereProcess(Cache::get('process'))->first();
			
			//Update upcoming tasks
			$first = true;
			
			for($process = Cache::get('process'); $process<=10; $process++){
			$tasks_next = Tasks::OrderBy('id', 'desc')
						->whereJobId($tasks_first->job_id)
						->whereProcess($process)->first();
			if(!empty($tasks_next)){
			
			//Update status of next task
			if($first){
			$days = Cache::get('days')->addDays($tasks_next->days);
			$tasks_next->deadline = $days;
			$tasks_next->status = 1;
			$tasks_next->save();	
			$first = false;
			Cache::put('days', $days, 5);
			}
			//Update remaining tasks
			else{
			$days = Cache::get('days')->addDays($tasks_next->days);
			$tasks_next->deadline = $days;
			$tasks_next->save();	
			Cache::put('days', $days, 5);			
			}
			}
			}
			Cache::forget('days', 'process');	
	}	
	public function TaskComplete($id){
			//Retrieve Current Task
			$tasks_first = Tasks::whereId($id)->first();
			
			//Convert deadline date to Carbon-friendly form
			$y = date("Y", strtotime($tasks_first->deadline));
			$m = date("m", strtotime($tasks_first->deadline));
			$d = date("d", strtotime($tasks_first->deadline));
			
			//Save completion date for task
			$tasks_first->completion = Carbon::now();
			$tasks_first->save();
			
			//Find difference between completion and schedule deadline
			$difference = Carbon::now()->diffInDays(Carbon::createFromDate($y, $m, $d),false);
			
			//If difference is positive, task is late, decrease server score
			if($difference < 0){
			$abs_difference = abs($difference);
			DB::table('company')->where('id', $tasks_first->vendor)->increment('total_points', $abs_difference);
			}
			//Else on-time, increase score
			else{
			DB::table('company')->where('id', $tasks_first->vendor)->increment('points', $difference);
			DB::table('company')->where('id', $tasks_first->vendor)->increment('total_points', $difference);		
			}
			
			//Save process and date to cache to update the deadlines of upcoming tasks
			Cache::put('process', $tasks_first->process, 5);
			Cache::put('days', Carbon::now(), 5);
			Cache::increment('process');
			
			//Determine if this was the last task for the job
			$tasks_final = Tasks::OrderBy('id', 'desc')
						->whereJobId($tasks_first->job_id)
						->whereProcess(Cache::get('process'))->first();
			
			//If it is last job, return back to controller
			if(empty($tasks_final)){

			Return TRUE;
			}
			
			//Update upcoming tasks
			$first = true;
			
			for($process = Cache::get('process'); $process<=10; $process++){
			$tasks_next = Tasks::OrderBy('id', 'desc')
						->whereJobId($tasks_first->job_id)
						->whereProcess($process)->first();
			if(!empty($tasks_next)){
			
			//Update status of next task
			if($first){
			$days = Cache::get('days')->addDays($tasks_next->days);
			$tasks_next->deadline = $days;
			$tasks_next->status = 1;
			$tasks_next->save();	
			$first = false;
			Cache::put('days', $days, 5);
			}
			//Update remaining tasks
			else{
			$days = Cache::get('days')->addDays($tasks_next->days);
			$tasks_next->deadline = $days;
			$tasks_next->save();	
			Cache::put('days', $days, 5);			
			}
			}
			}
			Cache::forget('days', 'process');
	}
	public function TaskLink($id)
	{
	if(Auth::user()->user_role=='Vendor' OR Auth::user()->user_role=='Admin'){
		$link = array();
		$status = DB::table('tasks')->where('id', $id)->pluck('process');
	}
	if($status == '0'){
		$link['text'] = 'Documents Picked Up';
		$link['link'] = $id;
		Return $link;
		}
	if($status == '1'){
		$link['text'] = 'Documents Sent For Filing';
		$link['link'] = $id;
		Return $link;
		}
		
	if($status == '2'){
		$link['text'] = 'Received Documents For Filing';
		$link['link'] = $id;
		Return $link;
		}
	if($status == '3'){
		$link['text'] = 'Documents Filed';
		$link['link'] = $id;
		Return $link;
		}
	if($status == '4'){
		$link['text'] = 'Documents Recorded';
		$link['link'] = $id;
		Return $link;
		}
	if($status == '5'){
		$link['text'] = 'Accept';
		$link['link'] = $id;
		Return $link;
		}

	
	if($status == '6'){
		
		$link['text'] = 'Attempt Serve';
		$link['text2'] = 'Attempting to Serve Defendant';
		$link['link'] = $id;
		Return $link;
		}

	
	if($status == '7'){

		$link['text'] = 'Complete and Upload Proof of Service';
		$link['link'] = $id;
		Return $link;
		}

	
	if($status == '8'){

		$link['text'] = 'Send Proof of Service';
		$link['link'] = $id;
		Return $link;
		}
	if($status == '9'){

		$link['text'] = 'Mail Documents to Defendant';
		$link['link'] = $id;
		Return $link;
		}
	if($status == '10'){

		$link['text'] = 'Send Declaration of Mailing to Court';
		$link['link'] = $id;
		Return $link;
		}

	
	else{
		Return false;
	}
	}
	public function TaskStatus($status)
	{
	
	if($status == '0'){
		if(Auth::user()->user_role=='Vendor'){
		Return 'Pick Up Documents from Firm';
		}
		else{
		Return 'Documents are being picked up for filing';
		}
	}
	if($status == '1'){
		if(Auth::user()->user_role=='Vendor'){
		Return 'Send Documents to Server';
		}
		else{
		Return 'Documents dispatched to server for filing';
		}
	}
	if($status == '2'){
		if(Auth::user()->user_role=='Vendor'){
		Return 'Documents for filing received';
		}
		else{
		Return 'Documents for filing received by server';
		}
	}
	if($status == '3'){
		if(Auth::user()->user_role=='Vendor'){
		Return 'File Documents with court';
		}
		else{
		Return 'Documents dispatched to court for filing';
		}
	}
	if($status == '4'){
		if(Auth::user()->user_role=='Vendor'){
		Return 'Record documents';
		}
		else{
		Return 'Documents dispatched for recording';
		}
	}

	if($status == '5'){
		if(Auth::user()->user_role=='Vendor'){
		Return 'Accept New Serve';
		}
		else{
		Return 'Waiting for Server to confirm new serve';
		}
	}
	if($status == '6'){
		if(Auth::user()->user_role=='Vendor'){
		Return 'Attempt Serve';
		}
		else{
		Return 'Out for Service';
		}
	}
	if($status == '7'){
		if(Auth::user()->user_role=='Vendor'){
		Return 'Complete and Upload Proof of Service';
		}
		else{
		Return 'Defendant Served';
		}
	}
	if($status == '8'){
		if(Auth::user()->user_role=='Vendor'){
		Return 'Send Proof of Service';
		}
		else{
		Return 'Proof Uploaded';
		}
	}
	if($status == '9'){
		if(Auth::user()->user_role=='Vendor'){
		Return 'Mail Documents to Defendant';
		}
		else{
		Return 'Documents being mailed to defendant';
		}
	}
	if($status == '10'){
		if(Auth::user()->user_role=='Vendor'){
		Return 'Send and Upload Declaration of Mailing to Court';
		}
		else{
		Return 'Declaration of Mailing Uploaded';
		}
	}
	}
	public function FilingTasks($send_task)
	{
		for($i=0; $i<=5; $i++){
			if($i==0){ 
		//Documents Picked Up
		$tasks = new Tasks;
		$tasks->job_id = $send_task['jobs_id'];
		$tasks->order_id = $send_task['orders_id'];
		$tasks->vendor = 1;
		$tasks->process = $i;
		$tasks->days = 3;
		$tasks->status = 1;
		$tasks->deadline = Carbon::now()->addDays(3);
		$tasks->save();
		
			}
			if($i==1){
		//Send Documents to Server
		$tasks = new Tasks;
		$tasks->job_id = $send_task['jobs_id'];
		$tasks->order_id = $send_task['orders_id'];
		$tasks->vendor = 1;
		$tasks->process = $i;
		$tasks->days = 3;
		$tasks->status = 0;
		$tasks->deadline = Carbon::now()->addDays(6);
		$tasks->save();
			}
			if($i==2){
		//Server Receives Documents
		$tasks = new Tasks;
		$tasks->job_id = $send_task['jobs_id'];
		$tasks->order_id = $send_task['orders_id'];
		$tasks->vendor = $send_task['vendor'];
		$tasks->process = $i;
		$tasks->days = 3;
		$tasks->status = 0;
		$tasks->deadline = Carbon::now()->addDays(11);
		$tasks->save();
			}
			if($i==3){
			if($send_task['filing']=='yes'){
		//Server Files Documents
		$tasks = new Tasks;
		$tasks->job_id = $send_task['jobs_id'];
		$tasks->order_id = $send_task['orders_id'];
		$tasks->vendor = $send_task['vendor'];
		$tasks->process = $i;
		$tasks->days = 3;
		$tasks->status = 0;
		$tasks->deadline = Carbon::now()->addDays(14);
		$tasks->save();
			}
			}
			if($i==4){
			if($send_task['recording']=='yes'){
		//Server Records Documents
		$tasks = new Tasks;
		$tasks->job_id = $send_task['jobs_id'];
		$tasks->order_id = $send_task['orders_id'];
		$tasks->vendor = $send_task['vendor'];
		$tasks->process = $i;
		if($send_task['filing']=='yes' AND $send_task['recording']=='yes'){
		$tasks->days = 0;
		}
		else{
		$tasks->days = 3;
		}
		$tasks->status = 0;
		$tasks->deadline = Carbon::now()->addDays(14);
		$tasks->save();
			}
			}

		}
		
	}
	public function ServiceTasks($send_task)
	{
		for($i=5; $i<=8; $i++){
			if($i==5){ 
		//Accept Refferal
		$tasks = new Tasks;
		$tasks->job_id = $send_task['jobs_id'];
		$tasks->order_id = $send_task['orders_id'];
		$tasks->vendor = $send_task['vendor'];
		$tasks->process = $i;
		$tasks->days = 3;
		$tasks->status = 1;
		$tasks->deadline = Carbon::now()->addDays(3);
		$tasks->save();
		
			}
			if($i==6){
		//First Service Attempt
		$tasks = new Tasks;
		$tasks->job_id = $send_task['jobs_id'];
		$tasks->order_id = $send_task['orders_id'];
		$tasks->vendor = $send_task['vendor'];
		$tasks->process = $i;
		$tasks->days = 7;
		$tasks->status = 0;
		$tasks->deadline = Carbon::now()->addDays(10);
		$tasks->save();
			}
			if($i==7){
		//Complete Proof of Service
		$tasks = new Tasks;
		$tasks->job_id = $send_task['jobs_id'];
		$tasks->order_id = $send_task['orders_id'];
		$tasks->vendor = $send_task['vendor'];
		$tasks->process = $i;
		$tasks->days = 3;
		$tasks->status = 0;
		$tasks->deadline = Carbon::now()->addDays(13);
		$tasks->save();
			}
			if($i==8){
		//Send Proof of Service
		$tasks = new Tasks;
		$tasks->job_id = $send_task['jobs_id'];
		$tasks->order_id = $send_task['orders_id'];
		$tasks->vendor = $send_task['vendor'];
		$tasks->process = $i;
		$tasks->days = 6;
		$tasks->status = 0;
		$tasks->deadline = Carbon::now()->addDays(19);
		$tasks->save();
			}

		}
		
	}
	
	public function DecOfMailing($send_task){
		for($i=9; $i<=10; $i++){	
			if($i==9){ 
		//Mail Documents
		$tasks = new Tasks;
		$tasks->job_id = $send_task['jobs_id'];
		$tasks->order_id = $send_task['orders_id'];
		$tasks->vendor = $send_task['vendor'];
		$tasks->process = $i;
		$tasks->days = 3;
		$tasks->status = 1;
		$tasks->deadline = Carbon::now()->addDays(3);
		$tasks->save();
		
			}
			if($i==10){ 
		//Send Dec of Mailing
		$tasks = new Tasks;
		$tasks->job_id = $send_task['jobs_id'];
		$tasks->order_id = $send_task['orders_id'];
		$tasks->vendor = $send_task['vendor'];
		$tasks->process = $i;
		$tasks->days = 3;
		$tasks->status = 0;
		$tasks->deadline = Carbon::now()->addDays(6);
		$tasks->save();
		
			}
		}
	}
	
	public function WaitingDocs($order_id){
		
		$tasks = Tasks::whereOrderId($order_id)->OrderBy('process', 'asc')->first();
		$task->status = 1;
		$task->save();	

	}

}
